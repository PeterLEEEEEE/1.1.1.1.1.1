#include <stdio.h> 
#include <stdlib.h> 

#define MAX_SIZE 100 
#define MAZE_SIZE 100 

typedef struct Pos {
	short x;
	short y;
}Pos;

typedef struct Stack
{
	Pos data[MAX_SIZE];
	int top;

}Stack;

char maze[MAZE_SIZE][MAZE_SIZE] = {         // 가로 9, 세로 12칸의 미로
	"XXXXXXXXXXXXXXXXXXXXXX",  //0
	"XS0000000X00000XXXXX0X",  //1    
	"X0XXXXXX0XXX0X0XXXXX0X",//2
	"X00000XX00000X0XXXXX0X",//3
	"XXXXX0XXXXXX0X0XXXXX0X",//4
	"X00000XXXXX00X0XXXXX0X",//5
	"X0XXX0XXXXX0XX0XXXXX0X",//6
	"X0X0XXX0X0XXX00XXXXX0X",//7
	"X0X0X000X00000XXXXXX0X",//8
	"X000X0X0XXXXXXXXXX000X",//9
	"X0XXX0X000000000000XXX",//10
	"X000X0X0XXXXXXXXXXXX0X",//11
	"X0XXX0X0X00000XX00000X",//12
	"X00000X0X0XXXXXX0XXX0X",//13
	"XXXXXXX0X0X000000XXX0X",//14
	"X0X00000X0X0XXXXXXXXXX",//15
	"X0X0XXXXX0X0XXXXXXXXXX",//16
	"X0X0000000X0000000000X",//17
	"X0XXXXX0XXXXXX0XXXXX0X",//18
	"X00000X000XXXX0XXX0X0X",//19
	"X0XXX0X0X0XXXX0XXX0X0X",//20
	"X00XX0X0X0X00000000X0X",//21
	"XX0XX0X0X0X0XXXXXXXX0X",//22
	"X00XX000X000X0000000EX",//23
	"XXXXXXXXXXXXXXXXXXXXXX" //24
};//가로 22칸  


void Init(Stack *p)
{
	p->top = -1;
}

int Is_full(Stack *p)
{
	return (p->top == MAX_SIZE - 1);
}

int Is_empty(Stack *p)
{
	return (p->top == -1);
}

void Push(Stack *p, Pos data)
{
	if (Is_full(p))
	{
		printf("스택이 꽉찼습니다\n"); return;
	}
	else
	{
		p->top++;
		p->data[p->top].x = data.x;
		p->data[p->top].y = data.y;

	}
}

Pos Pop(Stack *p)
{
	if (Is_empty(p))
	{
		printf("스택이 비어있습니다\n");
		exit(1);
	}

	return p->data[(p->top)--];
}

void Push_Loc(Stack *s, int x, int y)
{
	if (x < 0 || y < 0 || x > MAZE_SIZE || y > MAZE_SIZE) return;

	if (maze[x][y] != 'X' && maze[x][y] != '.')
	{
		Pos tmp;
		tmp.x = x;
		tmp.y = y;


		Push(s, tmp);
	}
}

int main()
{
	Stack s;
	Pos here;
	int i, j, x, y;

	Init(&s);

	// 시작점 구하기 
	for (i = 0; i < MAZE_SIZE; i++)
	{
		for (j = 0; j < MAZE_SIZE; j++)
		{
			if (maze[i][j] == 'S')
			{
				here.x = i;
				here.y = j;
			}
		}
	}


	printf("시작 점 (%d,%d) \n", here.x, here.y);

	while (maze[here.x][here.y] != 'E')
	{
		x = here.x;
		y = here.y;

		maze[x][y] = '.'; // 방문한 곳을 표시 

		// 좌,우,위,아래중 이동 가능한 곳을 탐색 
		Push_Loc(&s, x + 1, y);
		Push_Loc(&s, x - 1, y);
		Push_Loc(&s, x, y + 1);
		Push_Loc(&s, x, y - 1);

		if (Is_empty(&s))
		{
			printf("실패\n");
			return 0;
		}
		else
		{
			here = Pop(&s); // 현재 좌표를 변경 
			printf("(%d,%d)\n", here.x, here.y);
		}
	}

	printf("도착 점 (%d,%d)\n", here.x, here.y);
	printf("탐색 성공\n");
}